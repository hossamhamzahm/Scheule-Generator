version: 2.1

orbs:
  node: circleci/node@5.0.3
  aws-cli: circleci/aws-cli@3.1.4

jobs:
  build_and_test:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
          name: Building TS files
      - run:
          command: npm run migrate-dev
          name: Running Migrations
      - run:
          command: npm test
          name: Testing API
  
  deploy:
    executor: aws-cli/default
    environment:
      PREVIOUS_INSTANCE_NAME: CircleCITest
      NEW_INSTANCE_NAME: CircleCITest
    steps:
      # - aws-cli/setup:
      #     aws-access-key-id: AWS_ACCESS_KEY_ID
      #     aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      #     aws-region: AWS_REGION
      # - checkout

      - add_ssh_keys:
          fingerprints:
            - "fd:d7:9c:a1:34:c6:19:52:34:76:5c:23:ee:5e:68:9e"

      - run:
          command: ssh -o StrictHostKeyChecking=accept-new $SSH_USER@$SSH_HOST "cd University-Schedule-Generator && git pull origin deploy && rm .bash_env*"
          name: Pull code from deploy branch

      - run:
          name: Export SSH Environment Variables
          command: |
            echo "Start env"
            echo "#!/usr/bin/env sh" > $BASH_ENV
            echo "export POWER_CAMPUS_USERNAME=${POWER_CAMPUS_USERNAME}" >> $BASH_ENV
            echo "export POWER_CAMPUS_PASSWORD=${POWER_CAMPUS_PASSWORD}" >> $BASH_ENV

            echo "export DB_NAME=${DB_NAME}" >> $BASH_ENV

            echo "export ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}" >> $BASH_ENV
            echo "export REFRESHER_TOKEN_SECRET=${REFRESHER_TOKEN_SECRET}" >> $BASH_ENV
            echo "export BCRYPT_PEPPER=${BCRYPT_PEPPER}" >> $BASH_ENV
            echo "export SALT_ROUNDS=${SALT_ROUNDS}" >> $BASH_ENV
            echo "export ENV=${ENV}" >> $BASH_ENV
            echo "export URL=${URL}" >> $BASH_ENV
            echo "End env"
            scp $BASH_ENV $SSH_USER@$SSH_HOST:University-Schedule-Generator
            
      - run:
          command: ssh -o StrictHostKeyChecking=accept-new $SSH_USER@$SSH_HOST "cd University-Schedule-Generator && source .bash_env* && source deploy.sh"
          name: Deployment
      
      
      # - run:
      #     command: sleep 1m
      #     name: Waiting of SSH Server to start at New EC2 Instance
      # - run:
      #     command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "mkdir ~/App && cd ~ && curl -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh && sudo bash /tmp/nodesource_setup.sh && sudo apt install nodejs && node -v"
      #     name: Performing SSH and Setting node environment
      # - run:
      #     command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "sudo npm install -g degit && cd ~/App && degit https://github.com/hiumesh/node-rest-api-jest-tests.git && npm install"
      #     name: Cloning the project
      # - run:
      #     command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "touch stater.sh && echo 'cd ~/App && npm start disown &' > stater.sh"
      #     name: Creating a stater script
      # - run:
      #     command: ssh -o StrictHostKeyChecking=accept-new -i $HOME/.ssh/id_rsa_4f5df96212ac1cd8d2475e6c1929e6fe ubuntu@$NEW_INSTANCE_IP "sh stater.sh >/dev/null 2>&1 &"
      #     name: Starting Server

workflows:
  test_my_app:
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test
          context:
            - CircleCITest